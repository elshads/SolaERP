@inherits LayoutComponentBase
@implements IDisposable
@inject AuthenticationStateProvider AuthenticationStateProvider

<HeadContent>
    <link rel="stylesheet" href="@($"/css/kendo/{SessionData.CurrentUser?.Theme}.css")">
</HeadContent>


<MudThemeProvider IsDarkMode="@(SessionData.CurrentUser?.Theme == "dark")" />
<MudSnackbarProvider />
<MudDialogProvider FullWidth="false"
                   MaxWidth="MaxWidth.Large"
                   CloseButton="true"
                   DisableBackdropClick="true"
                   NoHeader="false"
                   Position="DialogPosition.Center" />


<TelerikRootComponent>
    <CascadingValue Value="appState">
        <AuthorizeView>
            <Authorized>
                <div>
                    @Body
                </div>
            </Authorized>
            <NotAuthorized>
                <div>Loading...</div>
            </NotAuthorized>
        </AuthorizeView>
        <TelerikLoaderContainer Visible="@(appState != null ? appState.Loading : false)" />
        <TelerikMediaQuery Media="(max-width: 768px)" OnChange="@( (bool mobileView) => OnMobileViewChanged(mobileView) )"></TelerikMediaQuery>
    </CascadingValue>
</TelerikRootComponent>

@code {
    AppState appState;

    protected override async Task OnInitializedAsync()
    {
        appState = new AppState(Snackbar, SessionData, PageData);
        appState.Loading = true;
        SessionData.CurrentUser = await Http.GetFromJsonAsync<AppUser>("AppUser");
        appState.OnRefreshClick += Refresh;
        //SessionData.CurrentUserMenuAccessList = await Http.GetFromJsonAsync<List<UserMenuAccess>>("UserMenuAccess");
        appState.Loading = false;
    }

    async void Refresh()
    {
        await InvokeAsync(StateHasChanged);
    }

    void OnMobileViewChanged(bool mobileView)
    {
        appState.MobileView = mobileView;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        SessionData.AuthenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var isAuthenticated = SessionData.AuthenticationState.User.Identity.IsAuthenticated;
        if (firstRender && !isAuthenticated)
        {
            NavigationManager.NavigateTo("/authentication/login");
        }
    }

    void IDisposable.Dispose()
    {
        appState.OnRefreshClick -= Refresh;
    }
}

<style>
    .k-pager-sizes .k-dropdown-list, .k-pager-sizes .k-dropdown, .k-pager-sizes .k-dropdownlist, .k-pager-sizes > select {
        width: 6em;
    }

    .k-toolbar .k-button{
        min-height: 30px;
    }
</style>