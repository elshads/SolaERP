@page "/groups"
@implements IDisposable
@using Model = Group


<PageTitle>User Groups</PageTitle>

<TelerikGrid @ref="@gridRef" @key="@gridKey" Data="@modelList" Height="calc(100vh - 160px)"
             Pageable="true" Sortable="true" Navigable="true" Groupable="@showGroup"
             FilterMode="@GridFilterMode.FilterMenu" ShowColumnMenu="true"
             Resizable="true" Reorderable="true" @bind-PageSize="@gridPageSize"
             SelectionMode="@(editMode ? GridSelectionMode.None : GridSelectionMode.Multiple)" SelectedItems="@selectedModelList"
             SelectedItemsChanged="@((IEnumerable<Model> itemList) => OnGridItemSelect(itemList))"
             OnRowClick="@OnRowClickHandler" OnRowDoubleClick="@OnRowDoubleClickHandler"
             ConfirmDelete="true" OnDelete="@(e => DeleteHandler(e, 1))">
    <GridSettings>
        <GridPagerSettings PageSizes="@(new List<int?> { 10, 20, 50, 100, 1000, null })" />
    </GridSettings>
    <GridToolBar>
        @if (!gridReadOnly && false)
        {
            <GridCommandButton Icon="add" Enabled="@(!editMode)" OnClick="CreateHandler">Add Row</GridCommandButton>
            <GridCommandButton Command="Delete" Icon="delete" Enabled="@(!editMode && selectedModelList.Count() > 0)" OnClick="@(e => DeleteHandler(e, 2))">Delete</GridCommandButton>
        }
        <span class="k-toolbar-spacer" />
        <GridCommandButton Command="ExportToExcel" Icon="excel">@(!isMobileView ? "Export to Excel" : "")</GridCommandButton>
        <GridCommandButton Command="ShowRowButtons" Icon="button" OnClick="@(() => showRowButtons = !showRowButtons)">@(!isMobileView ? "Row buttons" : "")</GridCommandButton>
        <GridCommandButton Command="ShowGroup" Icon="layout" OnClick="@(() => showGroup = !showGroup)">@(!isMobileView ? "Group" : "")</GridCommandButton>
        <GridSearchBox DebounceDelay="0" />
    </GridToolBar>
    <GridColumns>
        <GridCommandColumn ShowColumnMenu="false" Reorderable="false" Width="90px" Visible="@(showRowButtons && !gridReadOnly)">
            <GridCommandButton Icon="edit" ShowInEdit="false" Enabled="(!editMode)" OnClick="EditHandler" />
            <GridCommandButton Command="Delete" Icon="delete" ShowInEdit="false" Enabled="(!editMode)" />
        </GridCommandColumn>
        <GridCheckboxColumn ShowColumnMenu="false" VisibleInColumnChooser="false" Reorderable="false" Locked="true" Width="42px" Visible="@(!editMode)" />
        <GridColumn Field="@(nameof(Model.GroupId))" Title="Id" Width="70px" Editable="false" TextAlign="ColumnTextAlign.Right" Visible="false" />
        <GridColumn Field="@(nameof(Model.GroupName))" Title="Name">
            <Template>
                @{
                    var rowContext = context as Model;
                }
                @if (isMobileView)
                {
                    <TelerikCard>
                        <CardHeader>
                            <CardTitle>
                                @rowContext.GroupName
                            </CardTitle>
                            <CardSubTitle>
                                @rowContext.Description
                            </CardSubTitle>
                        </CardHeader>
                        <CardSeparator></CardSeparator>
                        <CardBody>
                            <div>
                                IsMobileView: @isMobileView
                            </div>
                            <div>
                                EditMode: @editMode
                            </div>
                            <div>
                                Name: @rowContext.GroupName
                            </div>
                            <div>
                                Description: @rowContext.Description
                            </div>
                        </CardBody>
                        <CardFooter>
                            <CardSubTitle>
                                Storage count: 23 PCS
                            </CardSubTitle>
                        </CardFooter>
                    </TelerikCard>
                }
                else
                {
                    <text>@rowContext.GroupName</text>
                }
            </Template>
        </GridColumn>
        <GridColumn Field="@(nameof(Model.Description))" Title="Description" Visible="@(!isMobileView)" />
    </GridColumns>
</TelerikGrid>
<TelerikMediaQuery Media="(max-width: 768px)" OnChange="@( (mobileView) => isMobileView = mobileView )"></TelerikMediaQuery>


@code {
    // Grid specific variables - start
    Guid gridKey;
    TelerikGrid<Model> gridRef;
    List<Model> modelList = new();
    IEnumerable<Model> selectedModelList = new List<Model>();
    List<Model> deletedModelList = new List<Model>();
    Model selectedModel;
    bool showRowButtons { get; set; } = false;
    bool showDecimals { get; set; } = false;
    bool showGroup { get; set; } = false;
    int gridPageSize = 20;
    bool gridReadOnly = false;
    bool editMode = false;
    // Grid specific variables - end

    // Page specific variables - start
    // Page specific variables - end

    bool isMobileView = false;
    int activeTabIndex = 0;

    [CascadingParameter] public AppState AppState { get; set; }
    [CascadingParameter] public DialogFactory Dialogs { get; set; }

    protected override async Task OnInitializedAsync()
    {
        OnAppStateInitialized();
        await LoadData();
    }

    void OnAppStateInitialized()
    {
        AppState.SetDefaults();
        AppState.Report = new() { ReportId = 1, ReportName = NavigationManager.ToBaseRelativePath(NavigationManager.Uri) };
        AppState.ReportButtonVisible = true;
        AppState.OnReloadClick += ReloadClick;
    }

    void IDisposable.Dispose()
    {
        AppState.OnAddClick -= ReloadClick;
    }

    async Task LoadData()
    {
        AppState.Loading = true;
        //var _modelList = await Http.GetFromJsonAsync<IEnumerable<Model>>("Model");
        var _modelList = new List<Model>() { new Model { GroupId = 1, GroupName = "Group 1", Description = "GroupA" }, new Model { GroupId = 2, GroupName = "Group 2", Description = "GroupB" }, new Model { GroupId = 3, GroupName = "Group 3", Description = "GroupA" } };
        modelList = _modelList.ToList();
        AppState.Loading = false;
    }

    async void ReloadClick()
    {
        await LoadData();
    }

    void OnRowClickHandler(GridRowClickEventArgs args)
    {
        //
    }

    void OnRowDoubleClickHandler(GridRowClickEventArgs args)
    {
        var argsItem = args.Item as Model;
        NavigationManager.NavigateTo($"/groupcard?id={argsItem.GroupId}");
    }

    void SetEditMode(Model argsItem)
    {
        editMode = true;
        var currState = gridRef.GetState();
        currState.InsertedItem = null;
        currState.EditItem = null;
        currState.OriginalEditItem = null;

        Model itemToEdit = new(argsItem);

        currState.EditItem = itemToEdit;
        currState.OriginalEditItem = argsItem;
        gridRef.SetState(currState);
    }


    void OnGridItemSelect(IEnumerable<Model> itemList)
    {
        selectedModelList = itemList;
    }

    // Grid CRUD events - start

    void CreateHandler(GridCommandEventArgs args)
    {
        NavigationManager.NavigateTo("/usergroupcard");
    }

    void EditHandler(GridCommandEventArgs args)
    {
        var argsItem = (Model)args.Item;
        NavigationManager.NavigateTo($"/groupcard?id={argsItem.GroupId}");
    }

    async Task DeleteHandler(GridCommandEventArgs args, int sourceButton)
    {
        var argsItem = (Model)args?.Item;

        if (sourceButton == 1 && argsItem != null)
        {
            // Row button - has built-in confirmation dialog
            var deletedId = argsItem.GroupId;
            var response = await Http.PostAsJsonAsync<int>("Group", deletedId);
            var content = await response.Content.ReadFromJsonAsync<SqlResult>();
            if (content.DeletedResult > 0)
            {
                await LoadData();
                AppState.ShowAlert($"A record with Id {deletedId} successfully deleted", Severity.Success);
            }
            else
            {
                AppState.ShowAlert(content.DeletedResultMessage, Severity.Error);
            }
        }
        else if (sourceButton == 2 && selectedModelList.Count() > 0)
        {
            // Checkbox selection
            var count = selectedModelList.Count();
            var isConfirmed = await Dialogs.ConfirmAsync($"Are you sure you want to delete {count} record(s)?", "Delete!");

            if (isConfirmed)
            {
                var response = await Http.PostAsJsonAsync<IEnumerable<int>>("Group", selectedModelList.Select(e => e.GroupId));
                var content = await response.Content.ReadFromJsonAsync<SqlResult>();
                if (content.DeletedResult > 0)
                {
                    await LoadData();
                    AppState.ShowAlert($"{count} record(s) were successfully deleted", Severity.Success);
                }
                else
                {
                    AppState.ShowAlert(content.DeletedResultMessage, Severity.Error);
                }
            }
        }
        else
        {
            AppState.ShowAlert("Item is not selected", Severity.Warning);
        }
    }

    // Grid CRUD events - end

}

<style>
    .mud-checkbox .mud-icon-button {
        padding: 0;
    }
</style>