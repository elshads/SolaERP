@page "/payments/card"

@implements IDisposable
@using Model = PaymentDocument


<PageTitle>Payment Document</PageTitle>

<TelerikGridLayout RowSpacing="8px" ColumnSpacing="8px" VerticalAlign="GridLayoutVerticalAlign.Top">
    <GridLayoutColumns>
        <GridLayoutColumn Width="120px" />
        <GridLayoutColumn Width="300px" />
        <GridLayoutColumn />
    </GridLayoutColumns>
    <GridLayoutItems>
        <GridLayoutItem Row="1" Column="1">
            <label for="priority_radio">Priority</label>
            <ItemRadioGroup Id="priority_radio"
                            Data="@paymentDocumentPriorityList"
                            Item="@selectedPaymentDocumentPriority"
                            ItemChanged="@PaymentDocumentPriorityChanged"
                            UniqueField="PaymentDocumentPriorityId"
                            TextField="PaymentDocumentPriorityName"
                            TItem="PaymentDocumentPriority"
                            TValue="int"
                            Layout="RadioGroupLayout.Vertical">
            </ItemRadioGroup>
        </GridLayoutItem>
        <GridLayoutItem Row="1" Column="2">
            <div class="attachment-type">
                <TelerikGrid Data="@attachmentTypeList"
                             Height="205px"
                             Sortable="false"
                             Groupable="false"
                             Resizable="false"
                             Reorderable="false"
                             SelectionMode="GridSelectionMode.None">
                    <GridColumns>
                        <GridColumn Field="@(nameof(AttachmentType.AttachmentTypeId))" Title="Files" Width="55px">
                            <Template>
                                <TelerikCheckBox @bind-Value="@((context as AttachmentType).HasItems)" Enabled="false"></TelerikCheckBox>
                            </Template>
                        </GridColumn>
                        <GridColumn Field="@(nameof(AttachmentType.AttachmentTypeName))" Title="Type" Width="180px">
                            <Template>
                                @{
                                    var rowContext = context as AttachmentType;
                                    <LinkText OnClick="@(() => AttachmentTypeClick(rowContext))">@(rowContext.AttachmentTypeName)</LinkText>
                                }
                            </Template>
                        </GridColumn>
                    </GridColumns>
                </TelerikGrid>
            </div>
        </GridLayoutItem>
    </GridLayoutItems>
</TelerikGridLayout>

<TelerikDialog Visible="@showAttachmentType"
               VisibleChanged="@ShowAttachmentTypeChanged"
               Title="@($"Attachments - {selectedAttachmentType?.AttachmentTypeName}")"
               CloseOnOverlayClick="false"
               ShowCloseButton="true">
    <DialogContent>
        <div>@(selectedAttachmentType.AttachmentTypeName)</div>
        <div>Data Grid here: Add | Delete | Download</div>
        <TelerikGrid Data="@attachmentTypeList"
                     Height="205px"
                     Sortable="false"
                     Groupable="false"
                     Resizable="false"
                     Reorderable="false"
                     SelectionMode="GridSelectionMode.None">
            <GridColumns>
                <GridColumn Field="@(nameof(AttachmentType.AttachmentTypeId))" Title="Files" Width="55px">
                    <Template>
                        <TelerikCheckBox @bind-Value="@((context as AttachmentType).HasItems)" Enabled="false"></TelerikCheckBox>
                    </Template>
                </GridColumn>
                <GridColumn Field="@(nameof(AttachmentType.AttachmentTypeName))" Title="Type" Width="180px">
                    <Template>
                        @{
                            var rowContext = context as AttachmentType;
                            <LinkText OnClick="@(() => AttachmentTypeClick(rowContext))">@(rowContext.AttachmentTypeName)</LinkText>
                        }
                    </Template>
                </GridColumn>
            </GridColumns>
        </TelerikGrid>
    </DialogContent>
    <DialogButtons>
        <TelerikButton OnClick="@(() => ShowAttachmentTypeClosed())">Close</TelerikButton>
    </DialogButtons>
</TelerikDialog>

@code {

    [CascadingParameter] AppState AppState { get; set; }

    IEnumerable<PaymentDocumentPriority> paymentDocumentPriorityList = PaymentDocumentPriority.PaymentDocumentPriorityList;
    PaymentDocumentPriority selectedPaymentDocumentPriority = PaymentDocumentPriority.PaymentDocumentPriorityList.FirstOrDefault(e => e.PaymentDocumentPriorityId == 2);

    List<AttachmentType> attachmentTypeList = AttachmentType.AttachmentTypeList.ToList();
    AttachmentType selectedAttachmentType = new();
    bool showAttachmentType = false;

    List<Attachment> attachmentList = new List<Attachment>() { new Attachment { FileName = "FileName1" }, new Attachment { FileName = "FileName2" }, new Attachment { FileName = "FileName3" }, new Attachment { FileName = "FileName4" }, new Attachment { FileName = "FileName5" }, new Attachment { FileName = "FileName6" }, };

    protected override async Task OnInitializedAsync()
    {
        OnAppStateInitialized();
        await LoadData();
    }

    void OnAppStateInitialized()
    {
        AppState.SetDefaults();

        AppState.OnReloadClick += ReloadClick;
    }

    void IDisposable.Dispose()
    {
        AppState.OnAddClick -= ReloadClick;
    }

    async Task LoadData()
    {
        AppState.Loading = true;

        //

        AppState.Loading = false;
    }

    async void ReloadClick()
    {
        //await LoadData();
    }

    void PaymentDocumentPriorityChanged(PaymentDocumentPriority paymentDocumentPriority)
    {
        selectedPaymentDocumentPriority = paymentDocumentPriority;
    }

    void AttachmentTypeClick(AttachmentType attachmentType)
    {
        selectedAttachmentType = attachmentType;
        showAttachmentType = true;
    }

    void ShowAttachmentTypeChanged(bool visible)
    {
        showAttachmentType = visible;
        if (!visible)
        {
            selectedAttachmentType = new();
        }
    }

    void ShowAttachmentTypeClosed()
    {
        selectedAttachmentType = new();
        showAttachmentType = false;
    }

}

<style>
    .attachment-type .k-grid th, .attachment-type .k-grid td {
        padding: 4px 12px;
    }
</style>